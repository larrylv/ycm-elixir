import vim
import os.path
import tempfile
import sys
import re

def hijack_global_ycm_extra_conf():
    new_config = ""

    payload_path = vim.eval('expand("<sfile>:p:h:h")') + "/payload.py"
    config_path = vim.eval('get(g:, "ycm_global_ycm_extra_conf", "")')

    if config_path and os.path.exists(config_path):
        with open(config_path, "r") as config_file:
            new_config = config_file.read() + "\n"

    new_config += "### generated by ycm-elixir ####\n"

    with open(payload_path, "r") as payload_file:
        new_config += payload_file.read()

    (_, new_config_path) = tempfile.mkstemp("_ycm-elixir")
    with open(new_config_path, "w") as new_config_file:
        new_config_file.write(new_config)

    vim.command("let g:ycm_global_ycm_extra_conf = '" + new_config_path + "'")

def get_ycm_lib_path():
    rtp = vim.eval("&rtp").split(",")
    for dir in rtp:
        path = dir + "/python/"
        if os.path.exists(path):
            return path
    return None

def setup_ycm_system_paths():
    ycm_system_path = get_ycm_lib_path()
    if not ycm_system_path:
        return False

    sys.path.insert(0, ycm_system_path)

    # import ycm
    import ycm.setup
    ycm.setup.SetUpSystemPaths()

    return True

def hijack_ycmd_identifiers_regex():
    if not setup_ycm_system_paths():
        return
    import ycmd
    import ycmd.identifier_utils

    ycmd.identifier_utils.FILETYPE_TO_IDENTIFIER_REGEX["elixir"] = \
        re.compile( r"[_a-zA-Z-][\w\.]*", re.UNICODE )
